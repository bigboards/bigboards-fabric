FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# fabric

Fabric is the piece of software running on all the nodes in your cluster. It is responsible for managing 
one specific node and setup communication to all other nodes in the cluster.

The Fabric API holds endpoints to manipulate the cluster as a whole. The cluster endpoints will mainly
manipulate the entries in the key/value store. It is up to the current master to react to these changes and
manipulate the system accordingly

## Apps [/v1/apps]
Apps are the applications that run on the cluster. These applications are deployed to the different nodes
participating in the cluster based on the deployment plan provided during app installation.

### list installed apps [GET]

+ Response 200 (application/json)

        []

### install an app [POST]

Install a new app onto the cluster. 

+ Request (application/json)

        {
          "profile": {
            "id": "google-oauth2-103728492012393057640",
            "name": "Daan Gerits",
            "email": "daan.gerits@bigboards.io"
          },
          "slug": "elasticsearch",
          "name":"ElasticSearch",
          "logo": "https://www.elastic.co/static/img/elastic-logo-200.png",
          "description": "Search and analyze data in real-time",
          "version": "2.2.0",
          "services": [
            {
              "name": "ElasticSearch",
              "description": "The ElasticSearch Engine",
              "id": "elasticsearch",
              "daemons": [
                {
                  "name": "engine",
                  "instances": "all",
                  "id": "engine",
                  "driver": "docker",
                  "configuration": {
                    "Image": "bigboards/elasticsearch-x86_64",
                    "PortBindings": {
                      "9200/tcp": [{ "HostPort": "9200" }],
                      "9300/tcp": [{ "HostPort": "9300" }]
                    },
                    "Cmd": "/elasticsearch/bin/elasticsearch",
                    "Mounts": [
                      {
                        "Source": "resource:config/config/elasticsearch",
                        "Destination": "/elasticsearch/config",
                        "RW": true
                      }
                    ]
                  }
                }
              ]
            }
          ],
          "resources": [
            {
              "provider": "git",
              "settings": {
                "url": "https://github.com/bigboards/bb-stack-elasticsearch.git"
              },
              "id": "config"
            }
          ],
          "views": [
            {
              "type": "web",
              "name": "Kopf",
              "description": "A simple ui to manage elasticsearch",
              "service": "elasticsearch",
              "daemon": "engine",
              "port": "9200",
              "protocol": "http",
              "path": "/_plugins/kopf"
            }
          ]
        }

+ Response 200 (application/json)


        {}

## App [/v1/apps/{owner}/{slug}]

### get app details [GET]

+ Response 200 (application/json)

        {}
        
### uninstall app [DELETE]

+ Response 200 (application/json)

        {}


## Cluster [/v1/cluster]

### Get the cluster status [GET]

+ Response 200 (application/json)

        {
            cluster: "test-cluster"
            tints: { }
            nodes: {
                dc5360cc16db: {
                    daemons: { }
                    stats: {
                        0: 0
                        1: 0
                        2: 0
                        999: 0
                        total: 0
                    }
                }
            }
        }
        
## Events [/v1/events]
Events are the result of actions happening on the cluster. They are meant to get insights in what is happening
on the cluster
        
### list all events [GET]

+ Response 200 (application/json)

        []
        
## Nodes [/v1/nodes]
Nodes are the dna of the cluster. These endpoints give you some insights into what they are doing, but also
let you manipulate their purpose.

### list all nodes [GET]

+ Response 200 (application/json)

        [{
            deviceId: "dc53604316db"
            name: "dxps"
            hostname: "dxps"
            arch: "x86_64"
            memory: 7891632128
            ipv4: "10.10.1.183"
            mac: "dc:53:60:43:16:db"
            health: "passing"
            cores: 4
            storage: 495708528640
        }]
     
## Node [/v1/nodes/{node_id}]

+ Parameters
    + node_id (string) - ID of the node
    
### get details of a specific node [GET]
        
+ Response 200 (application/json)

        {
            deviceId: "dc53604316db"
            name: "dxps"
            hostname: "dxps"
            arch: "x86_64"
            memory: 7891632128
            cpus: [
                "Intel(R) Core(TM) i7-5500U CPU @ 2.40GHz"
                "Intel(R) Core(TM) i7-5500U CPU @ 2.40GHz"
                "Intel(R) Core(TM) i7-5500U CPU @ 2.40GHz"
                "Intel(R) Core(TM) i7-5500U CPU @ 2.40GHz"
            ]
            disks: [
                {
                    type: "data"
                    mount: "/tmp/data"
                    size: 495708528640
                }
            ]
            ipv4: "10.10.1.183"
            mac: "dc:53:60:43:16:db"
            health: [
                {
                    checkId: "serfHealth"
                    name: "Serf Health Status"
                    status: "passing"
                    notes: ""
                    output: "Agent alive and reachable"
                }
            ]
        }
        
## Services [/v1/services]
The services endpoints are responsible for retrieving and manipulating the services available on the cluster.
        
### list all services [GET]

+ Response 200 (application/json)

        [{
            cluster: "test-cluster"
            tints: { }
            nodes: {
                dc5360cc16db: {
                    daemons: { }
                    stats: {
                        0: 0
                        1: 0
                        2: 0
                        999: 0
                        total: 0
                    }
                }
            }
        }]