[% include generator.pre_install ignore missing %]

- name: make sure the [[ role.name ]] role data directory exists
  file:
    state: "directory"
    path: "[[ dirs.role_data ]]"
    owner: 1000
    mode: 0755

###############################################################################
##
## Volumes
##
###############################################################################
[% for volume in role.volumes %]
[%- if isRelativePath(volume.host) %]
[%- if isDirectory(generator.git + '/config/' + volume.host) %]
- name: make sure the [[ role.name ]] configuration directory exists
  file: state="directory" path="[[ dirs.config ]]/[[ volume.host ]]" owner="1000"

- name: make sure the [[ role.name ]] configuration files are available
  template:
    src: "{{ item }}"
    dest: "[[ dirs.config ]]/[[ volume.host ]]"
  with_fileglob:
    - ../templates/[[volume.host]]/*

[% else %]
- name: make sure the [[ role.name ]] configuration directory exists
  file: state="directory" path="[[ parentFileName(dirs.config + '/' + volume.host) ]]" owner="1000"

- name: make sure the [[ volume.container ]] volume exists
  template:
    src: "../templates/[[ volume.host ]]"
    dest: "[[ dirs.config ]]/[[ volume.host ]]"

[% endif -%]
[% endif -%]
[% endfor %]

###############################################################################
##
## Docker
##
###############################################################################

[% if not isFalsy(role.registry) %]
- name: login to the docker registry
  sudo: yes
  shell: docker login -e [[ role.registry.email ]] -u [[ role.registry.user ]] -p [[ role.registry.password ]] [[ role.registry.name ]]
[% endif %]

- name: make sure the [[ role.image ]] docker image is the latest one
  sudo: yes
[%- if not isFalsy(role.registry) %]
  shell: docker pull [[ role.registry.name ]]/[[ role.image ]]
[%- else %]
  shell: docker pull [[ docker.registry ]]/[[ role.image ]]
[%- endif %]

- name: make sure the [[ role.name ]] docker container exists
  sudo: yes
  docker:
    docker_api_version: "1.15"
    name: "[[ role.name ]]"
[% if not isFalsy(role.networking) %]
    net: "[[ role.networking ]]"
[% endif %]
    ports:[% for port in role.ports %]
      - "[[ port.host ]]:[[ port.container ]]"[% endfor %]
    publish_all_ports: "yes"
[% if not isFalsy(role.volumes_from) %]
    volumes_from:[% for v in role.volumes_from %]
      - "[[ v ]]"[% endfor %]
[% endif %]
    volumes:
      - "[[ dirs.role_data ]]:/data"
[%- for volume in role.volumes %]
[%- if isFalsy(volume.host) %]
      - "[[ volume.container ]]"
[%- elseif isRelativePath(volume.host) %]
      - "[[ dirs.config ]]/[[ volume.host ]]:[[ volume.container ]]"
[%- else %]
      - "[[ volume.host ]]:[[ volume.container ]]"
[%- endif %]
[%- endfor %]
[% if not isFalsy(role.registry) %]
    image: "[[ role.registry.name ]]/[[ role.image ]]"
[% else %]
    image: "[[ docker.registry ]]/[[ role.image ]]"
[% endif %]
[% if not isFalsy(role.links) %]
    links:[% for link in role.links %]
      - "[[ link ]]"[% endfor %]
[% endif %]
[% if not isFalsy(role.command) %]
    command: "[[ role.command ]]"
[% endif %]
[% if not isFalsy(role.privileged) %]
    privileged: yes
[% endif %]
    state: running[% if not isFalsy(role.environment) %]
    env:[% for envVar in role.environment %]
      [% if isFalsy(envVar.value) %] [[ envVar.key ]] [% else %] [[ envVar.key ]]: "[[ envVar.value ]]"[% endif %][% endfor %][% endif %]

- name: make sure the [[ role.name ]] init file is available
  copy: src=[[ role.name ]].conf dest=/etc/init/[[ role.name ]].conf
  sudo: yes

- name: make sure the [[ role.name ]] service is started at boot
  service: name=[[ role.name ]] enabled=yes state=started
  sudo: yes

[% include generator.post_install ignore missing %]